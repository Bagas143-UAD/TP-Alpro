#include <iostream>
#include <fstream>
#include <iomanip>
#include <sstream>
#include <ctime>
#include <cstdlib> 
#include <map>
#include <vector> 
#include <algorithm>

using namespace std;

const int MAX_ITEMS = 100;

struct fitur{
	int pilih;
	string admin; 
	string nama[3]={"Ian", "Bagas", "Zeicha"};
	double pass;
	double pin[3]={124, 143, 148};
};

struct Item {
    int id;
    string nama;
    double harga;
    int stock;
};

struct Retur {
    string namaBarang;
    int jumlah;
    string alasan;
};

Item items[MAX_ITEMS];
int itemCount = 0;


bool bandingkanNama(const Item& a, const Item& b) {
    return a.nama < b.nama;
}

bool bandingkanHarga(const Item& a, const Item& b) {
    return a.harga < b.harga;
}

void input() {
    if (itemCount >= MAX_ITEMS) {
        cout << "\n Gagal menambahkan barang, kapasitas penuh!\n";
        return;
    }

    cout << "\n Tambah Barang Baru\n";
    items[itemCount].id = itemCount + 1;
    cout << "Nama barang  : ";
    cin.ignore();
    getline(cin, items[itemCount].nama);
    cout << "Harga barang : ";
    cin >> items[itemCount].harga;
    cout << "Stok barang  : ";
    cin >> items[itemCount].stock;

    itemCount++;
    cout << "Barang berhasil ditambahkan!\n";
}

void tampilan() {
    if (itemCount == 0) {
        cout << "\n Tidak ada barang yang tersedia.\n";
        return;
    }

    cout << "\n Daftar Barang\n";
    cout << left << setw(5) << "ID" << setw(20) << "Nama" << setw(10) << "Harga" << setw(10) << "Stok" << endl;
    for (int i = 0; i < itemCount; i++) {
        cout << left << setw(5) << items[i].id
             << setw(20) << items[i].nama
             << setw(10) << items[i].harga
             << setw(10) << items[i].stock << endl;
    }
}

void tampilanTerurut() {
    if (itemCount == 0) {
        cout << "\nTidak ada barang yang tersedia untuk diurutkan.\n";
        return;
    }

    vector<Item> itemsCopy;
    for (int i = 0; i < itemCount; i++) {
        itemsCopy.push_back(items[i]);
    }

    int pilihan;
    cout << "\nUrutkan barang berdasarkan:\n";
    cout << "1. Nama (A-Z)\n";
    cout << "2. Harga (Termurah ke Termahal)\n";
    cout << "3. Kembali\n";
    cout << "Pilihan: ";
    cin >> pilihan;

    switch (pilihan) {
        case 1:
            sort(itemsCopy.begin(), itemsCopy.end(), bandingkanNama);
            cout << "\n--- Daftar Barang Terurut Berdasarkan Nama ---\n";
            break;
        case 2:
            sort(itemsCopy.begin(), itemsCopy.end(), bandingkanHarga);
            cout << "\n--- Daftar Barang Terurut Berdasarkan Harga ---\n";
            break;
        case 3:
            return; 
        default:
            cout << "Pilihan tidak valid.\n";
            return;
    }

   
    cout << left << setw(5) << "ID" << setw(20) << "Nama" << setw(10) << "Harga" << setw(10) << "Stok" << endl;
    for (size_t i = 0; i < itemsCopy.size(); i++) {
        cout << left << setw(5) << itemsCopy[i].id
             << setw(20) << itemsCopy[i].nama
             << setw(10) << itemsCopy[i].harga
             << setw(10) << itemsCopy[i].stock << endl;
    }
}

void simpan() {
    ofstream file("items.txt");
    if (!file) {
        cout << "\n Gagal membuka file untuk menyimpan data.\n";
        return;
    }

    for (int i = 0; i < itemCount; i++) {
        file << items[i].id << "," << items[i].nama << "," << items[i].harga << "," << items[i].stock << endl;
    }

    file.close();
    cout << "\n Data barang berhasil disimpan ke file!\n";
}

void tutup() {
    ifstream file("items.txt");
    if (!file) {
        cout << "\n File data tidak ditemukan, mulai dengan data kosong.\n";
        return;
    }

    itemCount = 0;
    string line;
    while (getline(file, line) && itemCount < MAX_ITEMS) {
        stringstream ss(line);
        string idStr, nama, hargaStr, stockStr;

        getline(ss, idStr, ',');
        getline(ss, nama, ',');
        getline(ss, hargaStr, ',');
        getline(ss, stockStr, ',');

        stringstream(idStr) >> items[itemCount].id;
        items[itemCount].nama = nama;
        stringstream(hargaStr) >> items[itemCount].harga;
        stringstream(stockStr) >> items[itemCount].stock;

        itemCount++;
    }

    file.close();
    cout << "\n Data barang berhasil dimuat dari file!\n";
}

double hitungDiskon(double total) {
    if (total >= 100000) return total * 0.10; 
    else if (total >= 50000) return total * 0.05; 
    else return 0;
}

void jual() {
    if (itemCount == 0) {
        cout << "\n Tidak ada barang yang tersedia untuk dijual.\n";
        return;
    }

    int id, quantity;
    tampilan();
    cout << "\n Masukkan ID barang yang ingin dibeli: ";
    cin >> id;
    cout << "Jumlah yang ingin dibeli: ";
    cin >> quantity;

    if (id < 1 || id > itemCount) {
        cout << "\n ID barang tidak valid.\n";
        return;
    }

    if (items[id - 1].stock < quantity) {
        cout << "\n Stok barang tidak mencukupi.\n";
        return;
    }

   items[id - 1].stock -= quantity;
double total = quantity * items[id - 1].harga;
double diskon = hitungDiskon(total);
double bayar = total - diskon;

cout << "\n Transaksi berhasil!\n";
cout << "Total harga    : Rp" << fixed << setprecision(2) << total << endl;
cout << "Diskon         : Rp" << diskon << endl;
cout << "Total dibayar  : Rp" << bayar << endl;

}

void tampilkanRekomendasiAcak() {
    if (itemCount == 0) {
        cout << "Belum ada barang tersedia.\n";
        return;
    }

    srand(time(0)); // seed random hanya sekali

    int jumlahRekomendasi = (itemCount >= 2) ? 2 : 1;
    cout << "\n--- Rekomendasi Spesial untuk Anda ---\n";

    for (int i = 0; i < jumlahRekomendasi; i++) {
        int index = rand() % itemCount;
        cout << "- " << items[index].nama 
             << " | Harga: Rp" << items[index].harga 
             << " | Stok: " << items[index].stock << endl;
    }

    cout << "--------------------------------------\n";
}

void laporan_stok_rendah() {
    cout << "\n Barang dengan stok rendah (<= 5):\n";
    bool ada = false;
    for (int i = 0; i < itemCount; i++) {
        if (items[i].stock <= 5) {
            cout << left << setw(5) << items[i].id
                 << setw(20) << items[i].nama
                 << setw(10) << items[i].harga
                 << setw(10) << items[i].stock << endl;
            ada = true;
        }
    }
    if (!ada) cout << "Semua barang dalam stok aman.\n";
}

void laporan_harga_tertinggi() {
    if (itemCount == 0) {
        cout << "Tidak ada barang.\n";
        return;
    }
    Item* max = &items[0];
    for (int i = 1; i < itemCount; i++) {
        if (items[i].harga > max->harga)
            max = &items[i];
    }
    cout << "\n Barang dengan harga tertinggi:\n";
    cout << "ID: " << max->id << ", Nama: " << max->nama << ", Harga: Rp" << max->harga << ", Stok: " << max->stock << endl;
}

void laporan_total_inventaris() {
    double total = 0;
    for (int i = 0; i < itemCount; i++) {
        total += items[i].harga * items[i].stock;
    }
    cout << "\n Total nilai inventaris: Rp" << total << endl;
}

void statistikPenjualan() {
    ifstream file("pembelian.txt");
    if (!file) {
        cout << "File pembelian.txt tidak ditemukan.\n";
        return;
    }

    map<string, double> penjualanPerHari;
    map<string, double> penjualanPerBulan;

    string line;
    string tanggal = "", bulan = "";

    while (getline(file, line)) {
        if (line.find("Waktu") != string::npos) {
            // Ambil format tanggal dan bulan dari baris waktu
            string waktu = line.substr(line.find(":") + 2);
            istringstream ss(waktu);
            string hari, namaBulan, tanggalAngka, waktuJam, tahun;
            ss >> hari >> namaBulan >> tanggalAngka >> waktuJam >> tahun;
            tanggal = tanggalAngka + "-" + namaBulan + "-" + tahun;
            bulan = namaBulan + "-" + tahun;
        }
        if (line.find("Total     :") != string::npos) {
            string totalStr = line.substr(line.find(":") + 2);
            double totalTransaksi = atof(totalStr.c_str());

            penjualanPerHari[tanggal] += totalTransaksi;
            penjualanPerBulan[bulan] += totalTransaksi;
        }
    }

    file.close();

    cout << "\n=== Statistik Penjualan per Hari ===\n";
    map<string, double>::iterator it;
		for (it = penjualanPerHari.begin(); it != penjualanPerHari.end(); ++it) {
   		 cout << it->first << " : Rp" << fixed << setprecision(2) << it->second << endl;
	}

    cout << "\n=== Statistik Penjualan per Bulan ===\n";
    for (it = penjualanPerBulan.begin(); it != penjualanPerBulan.end(); ++it) {
    cout << it->first << " : Rp" << fixed << setprecision(2) << it->second << endl;
	}
	
}

void laporanMenu() {
    fitur menu;
    do {
        cout << "\n Menu Laporan:\n";
        cout << "1. Barang Stok Rendah\n";
        cout << "2. Harga Tertinggi\n";
        cout << "3. Total Inventaris\n";
        cout << "4. Statistik Penjualan Harian/Bulanan\n";
        cout << "5. Kembali\n";
        cout << "Pilihan: ";
        cin >> menu.pilih;
		system("cls");
	
        switch (menu.pilih) {
            case 1: 
				laporan_stok_rendah(); 
				break;
            case 2: 
				laporan_harga_tertinggi(); 
				break;
            case 3: 
				laporan_total_inventaris(); 
				break;
			case 4:
    		statistikPenjualan();
    			break;
            case 5: 
				return;
            default: 
				cout << "Pilihan tidak valid.\n";
				
        }
    } 
	while (true);
}

void resetData() {
    char confirm;
    cout << "Yakin ingin menghapus semua data? (y/n): ";
    cin >> confirm;
    if (confirm == 'y' || confirm == 'Y') {
        itemCount = 0;
        cout << " Semua data dihapus.\n";
    } else {
        cout << " Aksi dibatalkan.\n";
    }
}

void ubahHarga() {
    int id;
    double hargaBaru;
    tampilan();
    cout << "Masukkan ID barang: ";
    cin >> id;
    if (id < 1 || id > itemCount) {
        cout << "ID tidak valid.\n";
        return;
    }
    cout << "Harga baru: ";
    cin >> hargaBaru;
    items[id - 1].harga = hargaBaru;
    cout << "Harga berhasil diubah.\n";
}

void ubahStok() {
    int id, stokBaru;
    tampilan();
    cout << "Masukkan ID barang: ";
    cin >> id;
    if (id < 1 || id > itemCount) {
        cout << "ID tidak valid.\n";
        return;
    }
    cout << "Stok baru: ";
    cin >> stokBaru;
    items[id - 1].stock = stokBaru;
    cout << "Stok berhasil diubah.\n";
}

void pengaturanMenu() {
    fitur menu;
    do {
        cout << "\n Menu Pengaturan:\n";
        cout << "1. Reset Semua Data\n";
        cout << "2. Ubah Harga Barang\n";
        cout << "3. Ubah Stok Barang\n";
        cout << "4. Kembali\n";
        cout << "Pilihan: ";
        cin >> menu.pilih;

        switch (menu.pilih) {
            case 1: 
				resetData(); 
				break;
            case 2: 
				ubahHarga(); 
				break;
            case 3: 
				ubahStok(); 
				break;
            case 4: 
				return;
            	default: cout << "Pilihan tidak valid.\n";
        }
    } 
	while (true);
}

void lihatUlasan() {
    ifstream file("ulasan.txt");
    if (!file) {
        cout << "Belum ada ulasan yang tersedia.\n";
        return;
    }
      string line;
    cout << "\n=== Daftar Ulasan Produk ===\n";
    while (getline(file, line)) {
        cout << line << endl;
    }
    file.close();
}

void bantuanMenu() {
    cout << "\n Bantuan Pengguna:\n";
    cout << "- Gunakan angka untuk memilih menu.\n";
    cout << "- Semua data akan disimpan secara otomatis saat keluar.\n";
    cout << "- Simpan file 'items.txt' agar data tidak hilang.\n";
}

void pembelianTambahanUser() {
    if (itemCount == 0) {
        cout << "\n Tidak ada barang tersedia.\n";
        return;
    }

    string namaPembeli = "User";
    char lanjut;
    double total = 0;
    double totalDiskon = 0;
    int jumlahBarang = 0;

    struct Transaksi {
        int id;
        string nama;
        double harga;
        int qty;
    } 
	keranjang[MAX_ITEMS];

    tampilan();
    do {
        int id, qty;
        cout << "\nMasukkan ID barang yang ingin dibeli: ";
        cin >> id;

        if (id < 1 || id > itemCount) {
            cout << "ID tidak valid.\n";
            continue;
        }

        cout << "Jumlah yang ingin dibeli: ";
        cin >> qty;

        if (items[id - 1].stock < qty) {
            cout << "Stok tidak mencukupi.\n";
            continue;
        }

        items[id - 1].stock -= qty;

        keranjang[jumlahBarang].id = items[id - 1].id;
        keranjang[jumlahBarang].nama = items[id - 1].nama;
        keranjang[jumlahBarang].harga = items[id - 1].harga;
        keranjang[jumlahBarang].qty = qty;

        total += qty * items[id - 1].harga;
        jumlahBarang++;

        cout << "Tambah barang lain? (y/n): ";
        cin >> lanjut;

    } while ((lanjut == 'y' || lanjut == 'Y') && jumlahBarang < MAX_ITEMS);

    totalDiskon = hitungDiskon(total);
    double bayar = total - totalDiskon;

    cout << "\n===== Struk Pembelian =====\n";
    for (int i = 0; i < jumlahBarang; i++) {
        cout << keranjang[i].nama << " x" << keranjang[i].qty
             << " = Rp" << keranjang[i].harga * keranjang[i].qty << endl;
    }
    cout << "Total      : Rp" << total << endl;
    cout << "Diskon     : Rp" << totalDiskon << endl;
    cout << "Total Bayar: Rp" << bayar << endl;

    // Catat transaksi
    ofstream log("pembelian.txt", ios::app);
    time_t now = time(0);
    char* dt = ctime(&now);
    log << "Waktu     : " << dt;
    log << "Pembeli   : " << namaPembeli << endl;
    for (int i = 0; i < jumlahBarang; i++) {
        log << "Barang    : " << keranjang[i].nama
            << " x" << keranjang[i].qty
            << " = " << keranjang[i].harga * keranjang[i].qty << endl;
    }
    log << "Total     : " << total << endl;
    log << "Diskon    : " << totalDiskon << endl;
    log << "Bayar     : " << bayar << endl;
    log << "---------------------------\n";
    log.close();
}

void beliBarangUserMulti() {
    if (itemCount == 0) {
        cout << "\n Tidak ada barang tersedia.\n";
        return;
    }

    string namaPembeli = "User";
    char lanjut;
    double total = 0;
    double totalDiskon = 0;
    int jumlahBarang = 0;

    struct Transaksi {
        int id;
        string nama;
        double harga;
        int qty;
    } keranjang[MAX_ITEMS];

    tampilan();
    do {
        int id, qty;
        cout << "\nMasukkan ID barang yang ingin dibeli: ";
        cin >> id;

        if (id < 1 || id > itemCount) {
            cout << "ID tidak valid.\n";
            continue;
        }

        cout << "Jumlah yang ingin dibeli: ";
        cin >> qty;

        if (items[id - 1].stock < qty) {
            cout << "Stok tidak mencukupi.\n";
            continue;
        }

        items[id - 1].stock -= qty;

        keranjang[jumlahBarang].id = items[id - 1].id;
        keranjang[jumlahBarang].nama = items[id - 1].nama;
        keranjang[jumlahBarang].harga = items[id - 1].harga;
        keranjang[jumlahBarang].qty = qty;

        total += qty * items[id - 1].harga;
        jumlahBarang++;

        cout << "Tambah barang lain? (y/n): ";
        cin >> lanjut;

    } while ((lanjut == 'y' || lanjut == 'Y') && jumlahBarang < MAX_ITEMS);

    totalDiskon = hitungDiskon(total);
    double bayar = total - totalDiskon;

    cout << "\n===== Struk Pembelian =====\n";
    for (int i = 0; i < jumlahBarang; i++) {
        cout << keranjang[i].nama << " x" << keranjang[i].qty
             << " = Rp" << keranjang[i].harga * keranjang[i].qty << endl;
    }
    cout << "Total      : Rp" << total << endl;
    cout << "Diskon     : Rp" << totalDiskon << endl;
    cout << "Total Bayar: Rp" << bayar << endl;

    
    ofstream log("pembelian.txt", ios::app);
   	time_t now = time(0);

	char* time_cstr = asctime(localtime(&now));
	string dt(time_cstr);       
	dt.erase(dt.find_last_not_of(" \n\r\t") + 1); 

    log << "Waktu     : " << dt << endl;
    log << "Pembeli   : " << namaPembeli << endl;
    
    for (int i = 0; i < jumlahBarang; i++) {
        log << "Barang    : " << keranjang[i].nama
            << " x" << keranjang[i].qty
            << " = " << keranjang[i].harga * keranjang[i].qty << endl;
    }
    log << "Total     : " << total << endl;
    log << "Diskon    : " << totalDiskon << endl;
    log << "Bayar     : " << bayar << endl;
    log << "---------------------------\n";
    log.close();
}

void keranjangBelanjaUser() {
    if (itemCount == 0) {
        cout << "\n Tidak ada barang tersedia.\n";
        return;
    }

    struct Transaksi {
        int id;
        string nama;
        double harga;
        int qty;
    } keranjang[MAX_ITEMS];

    int jumlahBarang = 0;
    double total = 0;
    char lanjut;

    tampilan();

    do {
        int id, qty;
        cout << "\nMasukkan ID barang: ";
        cin >> id;
        if (id < 1 || id > itemCount) {
            cout << "ID tidak valid.\n";
            continue;
        }

        cout << "Jumlah beli: ";
        cin >> qty;

        if (items[id - 1].stock < qty) {
            cout << "Stok tidak cukup.\n";
            continue;
        }

        // Simpan ke keranjang
        keranjang[jumlahBarang].id = items[id - 1].id;
        keranjang[jumlahBarang].nama = items[id - 1].nama;
        keranjang[jumlahBarang].harga = items[id - 1].harga;
        keranjang[jumlahBarang].qty = qty;

        jumlahBarang++;
        total += qty * items[id - 1].harga;

        cout << "Tambah barang lagi? (y/n): ";
        cin >> lanjut;

    } while ((lanjut == 'y' || lanjut == 'Y') && jumlahBarang < MAX_ITEMS);

    // Hitung dan tampilkan total + diskon
    double diskon = hitungDiskon(total);
    double bayar = total - diskon;

    cout << "\n=== STRUK BELANJA ===\n";
    for (int i = 0; i < jumlahBarang; i++) {
        cout << keranjang[i].nama << " x" << keranjang[i].qty
             << " = Rp" << keranjang[i].harga * keranjang[i].qty << endl;

        // Kurangi stok
        items[keranjang[i].id - 1].stock -= keranjang[i].qty;
    }
    cout << "Total     : Rp" << total << endl;
    cout << "Diskon    : Rp" << diskon << endl;
    cout << "Bayar     : Rp" << bayar << endl;

    // Simpan ke file
    ofstream log("pembelian.txt", ios::app);
    time_t now = time(0);
    string dt = ctime(&now);
    dt.erase(dt.find_last_not_of(" \n\r\t") + 1);

    log << "Waktu     : " << dt << endl;
    log << "Pembeli   : User\n";
    for (int i = 0; i < jumlahBarang; i++) {
        log << "Barang    : " << keranjang[i].nama
            << " x" << keranjang[i].qty
            << " = " << keranjang[i].harga * keranjang[i].qty << endl;
    }
    
    log << "Total     : " << total << endl;
    log << "Diskon    : " << diskon << endl;
    log << "Bayar     : " << bayar << endl;
    log << "---------------------------\n";
    log.close();
}

void riwayatPembelian() {
    ifstream log("pembelian.txt");
    if (!log) {
        cout << "Belum ada riwayat pembelian.\n";
        return;
    }

    string line;
    cout << "\n===== Riwayat Pembelian =====\n";
    while (getline(log, line)) {
        cout << line << endl;
    }
    log.close();
}

void tambahUlasan() {
    string namaBarang, komentar;
    cin.ignore();
    cout << "\n>>> Masukkan nama barang yang ingin diulas: ";
    getline(cin, namaBarang);
    cout << ">>> Tulis ulasan Anda: ";
    getline(cin, komentar);

    ofstream file("ulasan.txt", ios::app);
    if (!file) {
        cout << "Gagal menyimpan ulasan.\n";
        return;
    }

    time_t now = time(0);
    string waktu = ctime(&now);
    waktu.erase(waktu.find_last_not_of(" \n\r\t") + 1);

    file << "Waktu: " << waktu << "\n";
    file << "Barang: " << namaBarang << "\n";
    file << "Ulasan: " << komentar << "\n";
    file << "--------------------------\n";

    file.close();
    cout << ">>> Ulasan berhasil disimpan!\n";
}

void cariProduk() {
    string keyword;
    cin.ignore(); 
    cout << ">>> Masukkan kata kunci nama produk: ";
    getline(cin, keyword);

    bool ditemukan = false;
    cout << "\nHasil Pencarian:\n";
    cout << left << setw(5) << "ID" 
         << setw(20) << "Nama" 
         << setw(10) << "Harga" 
         << setw(10) << "Stok" << endl;
    
    for (int i = 0; i < itemCount; i++) {
        
        if (items[i].nama.find(keyword) != string::npos) {
            cout << left << setw(5) << items[i].id
                 << setw(20) << items[i].nama
                 << setw(10) << items[i].harga
                 << setw(10) << items[i].stock << endl;
            ditemukan = true;
        }
    }

    if (!ditemukan) {
        cout << ">>> Produk tidak ditemukan.\n";
    }
}

void tampilkanBarangBaru() {
    if (itemCount == 0) {
        cout << "\nBelum ada barang di sistem.\n";
        return;
    }

    cout << "\n=== Barang Terbaru Ditambahkan ===\n";
    int jumlah = (itemCount >= 3) ? 3 : itemCount;
    for (int i = itemCount - jumlah; i < itemCount; i++) {
        cout << left << setw(5) << items[i].id
             << setw(20) << items[i].nama
             << setw(10) << items[i].harga
             << setw(10) << items[i].stock << endl;
    }
}

void returBarang() {
    if (itemCount == 0) {
        cout << "Belum ada barang untuk diretur.\n";
        return;
    }

    string namaBarang, alasan;
    int jumlahRetur;
    cin.ignore();
    cout << "Masukkan nama barang yang ingin diretur: ";
    getline(cin, namaBarang);

    int indeks = -1;
    for (int i = 0; i < itemCount; i++) {
        if (items[i].nama == namaBarang) {
            indeks = i;
            break;
        }
    }

    if (indeks == -1) {
        cout << "Barang tidak ditemukan dalam sistem.\n";
        return;
    }

    cout << "Jumlah yang ingin diretur: ";
    cin >> jumlahRetur;

    if (jumlahRetur <= 0) {
        cout << "Jumlah tidak valid.\n";
        return;
    }


    cin.ignore();
    cout << "Alasan retur: ";
    getline(cin, alasan);

    // Tambahkan ke stok
    items[indeks].stock += jumlahRetur;

    // Catat retur ke file
    ofstream file("retur.txt", ios::app);
    if (!file) {
        cout << "Gagal mencatat retur ke file.\n";
        return;
    }

    time_t now = time(0);
    string waktu = ctime(&now);
    waktu.erase(waktu.find_last_not_of(" \n\r\t") + 1);

    file << "Waktu     : " << waktu << endl;
    file << "Barang    : " << namaBarang << endl;
    file << "Jumlah    : " << jumlahRetur << endl;
    file << "Alasan    : " << alasan << endl;
    file << "---------------------------\n";

    file.close();

    cout << ">>> Retur barang berhasil dicatat dan stok diperbarui!\n";
}

void garis(){
	for(int i=0; i<=20; i++){
		cout<<"=";
	}
	cout<<endl;
}

void tampilanUser() {
    fitur menu;
    tampilkanRekomendasiAcak();
    do {
        cout << "\n=== Menu User ===\n";
        cout << "1. Daftar Produk\n";
        cout << "2. Sorting Produk\n"; // <-- MENU BARU
        cout << "3. Cari Produk\n";
        cout << "4. Lihat Produk Baru Ditambahkan\n";
        cout << "5. Beli Produk\n";
        cout << "6. Pembelian Tambahan\n";
        cout << "7. Keranjang Belanja\n";
        cout << "8. Riwayat pembelian\n";
        cout << "9. Tulis Ulasan Produk\n";
        cout << "10. Retur Produk\n";
        cout << "11. Kembali\n";

        cout << "Pilih menu: ";
        cin >> menu.pilih;

        switch (menu.pilih) {
            case 1: tampilan(); break;
            case 2: tampilanTerurut(); break; // <-- PANGGIL FUNGSI BARU
            case 3: cariProduk(); break;
            case 4: tampilkanBarangBaru(); break;
            case 5: beliBarangUserMulti(); break;
            case 6: pembelianTambahanUser(); break;
            case 7: keranjangBelanjaUser(); break;
            case 8: riwayatPembelian(); break;
            case 9: tambahUlasan(); break;
            case 10: returBarang(); break;
            case 11: return;
            default: cout << "Pilihan tidak valid.\n";
        }
    } while (true);
}

void tampilanadmin(){
    fitur menu;
    do {
        cout << "\n=== Sistem Manajemen Toko Swalayan ===\n";
        cout << "1. Tambah Produk\n";
        cout << "2. Daftar Produk\n";
        cout << "3. Sorting Produk\n"; // <-- MENU BARU
        cout << "4. Jual Barang\n";
        cout << "5. Simpan & Keluar\n";
        cout << "6. Laporan\n";
        cout << "7. Lihat Ulasan Produk\n";
        cout << "8. Pengaturan\n";
        cout << "9. Bantuan\n";
        cout << "Pilih menu: ";
        cin >> menu.pilih;
        system("cls");

        switch (menu.pilih) {
            case 1: input(); break;
            case 2: tampilan(); break;
            case 3: tampilanTerurut(); break; // <-- PANGGIL FUNGSI BARU
            case 4: jual(); break;
            case 5:
                simpan();
                cout << " Terima kasih telah menggunakan aplikasi.\n";
                menu.pilih = 99; // Ubah nilai untuk keluar dari loop
                break;
            case 6: laporanMenu(); break;
            case 7: lihatUlasan(); break;
            case 8: pengaturanMenu(); break;
            case 9: bantuanMenu(); break;
            default: cout << " Pilihan tidak valid.\n";
        }
    } while (menu.pilih != 99 && menu.pilih != 5); // Sesuaikan kondisi loop
}

void password() {
    fitur sandi;
    
    struct Admin {
        string nama;
        double pin;
    };

    Admin admins[3] = {
        {"Ian", 124},
        {"Bagas", 143},
        {"Zeicha", 148}
    };

    cout << "\n======= LOGIN =======\n";
    cout << "Nama Pengguna  : "; cin >> sandi.admin;
    cout << "Pin            : "; cin >> sandi.pass;

    int kiri = 0, kanan = 2;
    int index = -1;
    while (kiri <= kanan) {
        int tengah = (kiri + kanan) / 2;
        if (sandi.pass == admins[tengah].pin) {
            index = tengah;
            break;
        } else if (sandi.pass < admins[tengah].pin) {
            kanan = tengah - 1;
        } else {
            kiri = tengah + 1;
        }
    }

    if (index != -1 && sandi.admin == admins[index].nama) {
        system("cls");
        cout << "Selamat datang " << admins[index].nama << endl;
        tampilanadmin();
    } else {
        system("cls");
        cout << "Nama atau PIN anda salah!\n";
        password();
    }
}


int main() {
	ofstream cek("pembelian.txt", ios::app);
    cek.close();
    
    tutup();
    fitur menu;
    
    do {
        garis();
        cout<<"SISTEM MANAJEMEN TOKO SWALAYAN\n";
        garis();
        cout<<"1. Admin\n";
        cout<<"2. User\n";
        cout<<"3. Keluar\n";
        cout<<"Pilih Sistem: ";
        cin>>menu.pilih;
        cout<<endl;

        switch (menu.pilih) {
            case 1: 
            	system("cls");
				password(); 
				break;
           case 2:
   				 system("cls");
   				 tampilanUser(); 
    			break;

            case 3: 
				cout << ">>> Terima kasih telah menggunakan sistem.";
				cout<<endl; 
				break;
            default: 
				cout << ">>> Pilihan tidak valid!";
				cout<<endl; 
				break;
        }
    } while (menu.pilih != 3);

    return 0;
}
